Link: https://github.com/JerryTammi/CyberSecurityBaseProject

FLAW 1: A04:2021 – Insecure Design

https://github.com/JerryTammi/CyberSecurityBaseProject/blob/main/cybersecproj/accounts/views.py#L68
https://github.com/JerryTammi/CyberSecurityBaseProject/blob/main/cybersecproj/accounts/views.py#L83
https://github.com/JerryTammi/CyberSecurityBaseProject/blob/main/cybersecproj/accounts/templates/forgottenpassword.html
https://github.com/JerryTammi/CyberSecurityBaseProject/blob/main/cybersecproj/accounts/templates/recover.html

Description: 
	Account recovery is way too easy if the username is known and they are visible if the account has an active listing. During registeration a security question (only one) is selected and an answer is provided. If the answer is correct, a form for changing the password is given to the user. According to OWASP Top 10 and other credible sources, questions and answers are not a secure enough authentication method because more than one person can know the answers.
	
Fix:
	The most obvious way to fix this would be to:
		1. Verify the email during registration.
		2. Get rid of the security questions and answers
		3. Instead of asking for a username for the forgotten password form, an email address would be required.
		4. Access to the change password form would be provided in the email.
	
	Fixed Code:
		https://github.com/JerryTammi/CyberSecurityBaseProject/blob/main/cybersecproj/flaws/Insecure%20design/insec_design.py
	

FLAW 2: A03:2021 – Injection (Cross-site Scripting)

https://github.com/JerryTammi/CyberSecurityBaseProject/blob/main/cybersecproj/flaws/2.%20Injection/csrf.html
https://github.com/JerryTammi/CyberSecurityBaseProject/blob/main/cybersecproj/market/views.py#L31

Description: 
	Shortly put a scammer can make the user buyer a product if the user accesses the site containing "csrf.html". It is possible because of the lack of a csrf_token to verify that the request came from the same website.To replicate the issue, the tester must:
		1. Create at least two accounts. One who will be "scammed" and another that owns the listings. 
		2. Add an ad that will be sold by the scammer
		3. From the "/listads" page you have to view the source (on chrome ctrl u) and grab the value of ad_id
		4. Log in as the account about to be scammed.
		5. Edit the csrf.html file so that the src in the img tag has the correct value for ad_id
		6. In the file containing csrf.html run "python3 -m http.server 9000"
		7. In a browser open up "http://localhost:9000/csrf.html"
		8. You can check the scammed accounts bought items (browse your listings on -link on the front page) if the item in question is one of them.
	
Fix:
	Pretty simple fix, just remove the csrf_exempt tag from the function and add {{ csrf_token }} into the buy form in the listads.html file. I also changed the request method from GET to POST.

	Fixed Code:
		https://github.com/JerryTammi/CyberSecurityBaseProject/blob/main/cybersecproj/flaws/2.%20Injection(csrf)/csrffix.py
		https://github.com/JerryTammi/CyberSecurityBaseProject/blob/main/cybersecproj/flaws/2.%20Injection(csrf)/listadsfixed.html
		
		
FLAW 3: A09:2021 – Security Logging and Monitoring Failures

Description:
	There are basically no logging features implemented into the project. which could be used to detect for example:
		1. Scammers selling items for extortionate prices
		2. Spam creating listings which would affect the visibility of legitimate listings
		3. Suspicious logins or login attempts from unfamiliar ip addresses
		4. New listing should go through a filter to ensure that no illegal or unwanted items are up for sale
		
Fix:
	I'm not going to go into too much detail but adding a log model that contains the user logging in, time of said user logging in, and the location (ip address) where the user has logged in from. Another fix is going through a list (not provided in the code) to ensure that the item for sale is safe.
	
	Fixed Code:
		https://github.com/JerryTammi/CyberSecurityBaseProject/blob/main/cybersecproj/flaws/3.%20Logging/logging.py
		
		
FLAW 4: A01:2021 – Broken Access Control

https://github.com/JerryTammi/CyberSecurityBaseProject/blob/main/cybersecproj/market/views.py#L52
https://github.com/JerryTammi/CyberSecurityBaseProject/blob/main/cybersecproj/market/templates/listpersonal.html#L13

Description:
	Users can access other users listings (intended) where they can delete their lisitngs (not intended). As of now, there is no way to restore the deleted ad, resulting in a potentially catastrophic loss of money!

Fix:
	Ensure that only the owners of the listing can see the delete button and verify in the funciton, that the person logged in deleteing the ad is also the owner of the ad.
	
	Fixed Code:
		

	
